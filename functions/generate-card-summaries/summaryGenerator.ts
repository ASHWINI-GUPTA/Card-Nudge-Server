import { GoogleGenerativeAI } from "@google/generative-ai";
import { Bank, Card } from "../shared/models.ts";

const AI_API_KEY = Deno.env.get("AI_API_KEY");

// Initialize the AI client outside the function to reuse connections if possible
// Ensure AI_API_KEY is available during the Deno deploy process for function initialization
const genAI = AI_API_KEY ? new GoogleGenerativeAI(AI_API_KEY) : null;

// --- PROMPT DEFINITION ---
// This prompt will be used to guide the AI in generating the summary.
const generateSummaryPrompt = (
  card: Card,
  bank: Bank,
): string => {
  return `You are an expert in credit card analysis. Your task is to provide a concise and clear summary of the key benefits for a credit card.

  Card Name: ${card.name}
  Bank Name: ${bank.name}
  Card Payment Network: ${card.card_type}

  Instructions:
  - Identify the primary advantages for the cardholder.
  - Focus on rewards (cash back, points, miles), travel perks, insurances, annual fees, and other significant features.
  - Do not include details about interest rates, APR, or balance transfers unless they are explicitly a *benefit* (e.g., 0% intro APR).
  - The summary should be easy to understand for a layperson.
  - Keep the summary to approximately 3-5 concise sentences or 50-100 words.
  - Start directly with the benefits, do not use an introductory phrase like "This card offers..."
  - If there's an annual fee and other charges, mention it clearly at the end.

  Summary:
  `;
};

/**
 * Generates a raw, unformatted summary of credit card benefits using an AI model.
 * @param cardName The name of the credit card.
 * @param benefitDetails The raw text detailing the card's benefits.
 * @returns A promise that resolves to the AI-generated summary string.
 * @throws Error if AI_API_KEY is not set or if the AI call fails.
 */
export async function generateSummary(
  card: Card,
  bank: Bank,
): Promise<string> {
  if (!AI_API_KEY || !genAI) {
    throw new Error(
      "AI_API_KEY environment variable not set or AI client not initialized.",
    );
  }

  try {
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    const result = await model.generateContent(
      generateSummaryPrompt(card, bank),
    );
    const response = result.response;
    const summary = response.text();

    if (!summary) {
      throw new Error("Model did not return a summary.");
    }

    console.log(
      `Generated raw summary for "${card.name}": ${summary.substring(0, 100) // Shorten summary to 100 chars
      }...`,
    );
    return summary;
  } catch (error) {
    console.error(`Error generating summary for "${card.name}":`, error);
    throw new Error(`Failed to generate summary: ${error}`);
  }
}

const convertToMarkdownPrompt = (rawSummaryText: string): string => {
  return (
    `Your task is to convert the following credit card benefit summary into well-structured and readable Markdown format.

  Summary to Convert:
  """
  ${rawSummaryText}
  """

  Instructions:
    - Use appropriate Markdown headings (e1.g., '## Key Benefits', '### Rewards', '### Perks') if the content naturally divides into sections.
    - Use bullet points (* or -) for listing distinct benefits.
    - Bold (**text**) key numbers, percentages, card names, or important features (e.g., "**5% cash back**", "**No annual fee**", "**Travel insurance**").
    - Ensure the output is clean, professional, and easy to read.
    - **Crucially: Do NOT add, remove, or alter any information from the original summary. Only reformat it.**
    - Do not include any introductory or concluding remarks (e.g., "Here is the summary in Markdown:"). Just provide the Markdown.

  Markdown Output:

  `
  );
};

/**
 * Converts a raw text summary into a Markdown-formatted string using an AI model.
 * @param rawSummaryText The raw text summary generated by an AI.
 * @returns A promise that resolves to the Markdown-formatted string.
 * @throws Error if AI_API_KEY is not set or if the AI call fails.
 */
export async function convertToMarkdown(
  rawSummaryText: string,
): Promise<string> {
  if (!AI_API_KEY || !genAI) {
    throw new Error(
      "AI_API_KEY environment variable not set or AI client not initialized.",
    );
  }

  try {
    const model = genAI.getGenerativeModel({ model: "gemini-pro" }); // Use the same model
    const result = await model.generateContent(
      convertToMarkdownPrompt(rawSummaryText),
    );
    const response = await result.response;
    const markdownSummary = response.text();

    if (!markdownSummary) {
      throw new Error("AI did not return a markdown summary.");
    }

    console.log(
      `Generated Markdown summary: ${markdownSummary.substring(0, 100)}...`,
    );
    return markdownSummary;
  } catch (error) {
    console.error(`Error converting summary to Markdown:`, error);
    throw new Error(`Failed to convert to Markdown: ${error}`);
  }
}
